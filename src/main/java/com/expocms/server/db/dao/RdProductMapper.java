package com.expocms.server.db.dao;

import java.util.List;

import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;
import org.springframework.stereotype.Repository;

import com.expocms.server.db.model.ProductIntroductionEntity;
import com.expocms.server.db.model.RdProduct;
import com.expocms.server.response.types.impl.AlRepayment;
import com.expocms.server.response.types.impl.AlSellOut;
import com.expocms.server.response.types.impl.ProductItem;

@Repository
public interface RdProductMapper {

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table rd_product
     * @mbggenerated  Thu Sep 17 11:37:42 CST 2015
     */
    int deleteByPrimaryKey (String ids);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table rd_product
     * @mbggenerated  Thu Sep 17 11:37:42 CST 2015
     */
    int insert (RdProduct record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table rd_product
     * @mbggenerated  Thu Sep 17 11:37:42 CST 2015
     */
    int insertSelective (RdProduct record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table rd_product
     * @mbggenerated  Thu Sep 17 11:37:42 CST 2015
     */
    RdProduct selectByPrimaryKey (String ids);
    RdProduct selectByNo (@Param("no")String no);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table rd_product
     * @mbggenerated  Thu Sep 17 11:37:42 CST 2015
     */
    int updateByPrimaryKey(RdProduct record);
    int updateQuickPayment(RdProduct record);
    int updateQuickPaymentFailed(RdProduct record);

//    @Select (value = "select * from rd_product where productType = 4 order by createDateTime limit 1")
//    RdProduct getRdProduct ();
    
    @Select (value = "select * from rd_product where status = 4 and productType = #{productType} order by createDateTime limit 1")
    RdProduct getRdProductWithIds (@Param("productType") String productType);
    
    @Select (value = "select * from rd_product where status > 4 and status < 8 and productType = #{productType} order by unsaleDateTime desc limit #{limitNum}")
    RdProduct getSoldOutRdProductWithIds (@Param("productType") String productType, @Param("limitNum") int limitNum);

//    @Select (value = "select count(1) from rd_product, rd_order where rd_product.ids = rd_order.productIds and rd_order.appUserID = #{appUserId}")
//    int queryUserOrderCount (String appUserId);

    @Select(value="SELECT p.productAmount as allMoney, p.interest*10 as predictYearEarnings, p.investigateDuration as investmentTimeLimit, p.startInterestDate as startDate, p.endInterestDate as endDate, p.minInvestigateAmount as lowMoney, p.maxInvestigateAmount as highMoney FROM rd_product p WHERE p.ids = #{productId}")
    ProductIntroductionEntity getProductIntroductionEntity(String productId);
    
    //@Select (value = "select p.productType as sellType, p.ids as productId, p.productName as productName, (soldAmount*10/productAmount) as alreadySell, p.interest*10 as predictYearEarnings, p.investigateDuration as investmentTimeLimit from rd_product p where p.status = 4")
//    @Select (value = "select p.productType as sellType, p.ids as productId, concat(p.productName, '第', p.series, '期') as productName, (soldAmount*10*100/productAmount) as alreadySell, p.interest*10 as predictYearEarnings, p.investigateDuration as investmentTimeLimit from rd_product p where p.status = 4 order by seq asc")
//	List<AlSelling> getSelling();
    
//    @Select (value = "select p.productType as sellType, p.ids as productId, concat(p.productName, '第', p.series, '期') as productName, (soldAmount*10*100/productAmount) as alreadySell, p.interest*10 as predictYearEarnings, p.investigateDuration as investmentTimeLimit from rd_product p where p.status = 4 and p.productType <> #{productType} order by seq asc")
//	List<AlSelling> getSellingExcludeProductType(String productType);

    //@Select (value = "select p.ids as productId, p.productName as productName, productAmount as allEarnings, p.interest*10 as predictYearEarnings from rd_product p where p.status = 7")
    @Select (value = "select p.ids as productId, concat(p.productName, '第', p.series, '期') as productName, productAmount as allEarnings, p.interest*10 as predictYearEarnings from rd_product p where p.status = 7 order by seq asc")
	List<AlRepayment> getAlreadyRepayment();

    //@Select (value = "select p.ids as productId, p.productName as productName, productAmount as allEarnings, p.interest*10 as predictYearEarnings from rd_product p where p.status = 5")
    @Select (value = "select p.ids as productId, concat(p.productName, '第', p.series, '期') as productName, productAmount as allEarnings, p.interest*10 as predictYearEarnings from rd_product p where p.status = 5 order by seq asc")
	List<AlSellOut> getAlreadySellOut();
    
    //@Select (value = "select p.ids as productId, p.productName as productName, productAmount as allEarnings, p.interest*10 as predictYearEarnings from rd_product p where p.status = #{0} limit #{1}, #{2}")
    @Select (value = "select p.ids as productId, concat(p.productName, '第', p.series, '期') as productName, productAmount as allEarnings, p.interest*10 as predictYearEarnings from rd_product p where p.status = #{0} order by seq asc limit #{1}, #{2}")
    List<ProductItem> getProductItemByStatus(int status, int min, int max);
    
    @Select (value = "select p.ids as productId, concat(p.productName, '第', p.series, '期') as productName, productAmount as allEarnings, p.interest*10 as predictYearEarnings from rd_product p where p.status = #{0} and p.productType <> #{3} order by seq asc limit #{1}, #{2}")
    List<ProductItem> getProductItemByStatusExcludeProductType(int status, int min, int max, String productType);
    
    @Select (value = "select count(*) as alreadyRepaymentNumber from rd_product where status = 7")
    int getAlreadyRepaymentNumber();

    @Select (value = "select sum(productAmount) as alreadypaidMoney from rd_product where status = 7")
    Long getAlreadypaidMoney();
    
    @Select (value = "select count(*) as alreadySellOutNumber from rd_product where status = 5")
    int getAlreadySellOutNumber();
    
    @Select (value = "select sum(productAmount) as alreadyRepaymentMoney  from rd_product where status = 5")
    Long getAlreadyRepaymentMoney();
    
    //@Select (value = "select * from rd_product p where p.ids in (select productId from rd_saleboard) order by seq asc")
    //@Select (value = "select p.productType, p.ids, p.productName, p.series, p.soldAmount, p.productAmount, p.interest, p.investigateDuration from rd_product p, rd_saleboard b where p.ids = b.productId order by b.seq asc")
    @Select (value = "select p.* from rd_product p, rd_saleboard b where p.ids = b.productId order by b.seq asc")
    List<RdProduct> getProductSaleBoard();
}
