package com.expocms.server.db.dao;

import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;
import org.springframework.stereotype.Repository;

import com.expocms.server.db.model.BorrowOrderEntity;
import com.expocms.server.db.model.RdLoanAgreement;

@Repository
public interface RdLoanAgreementMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table rd_loan_agreement
     *
     * @mbggenerated Sun Sep 13 15:37:00 CST 2015
     */
    int deleteByPrimaryKey(String ids);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table rd_loan_agreement
     *
     * @mbggenerated Sun Sep 13 15:37:00 CST 2015
     */
    int insert(RdLoanAgreement record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table rd_loan_agreement
     *
     * @mbggenerated Sun Sep 13 15:37:00 CST 2015
     */
    int insertSelective(RdLoanAgreement record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table rd_loan_agreement
     *
     * @mbggenerated Sun Sep 13 15:37:00 CST 2015
     */
    RdLoanAgreement selectByPrimaryKey(String ids);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table rd_loan_agreement
     *
     * @mbggenerated Sun Sep 13 15:37:00 CST 2015
     */
    int updateByPrimaryKeySelective(RdLoanAgreement record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table rd_loan_agreement
     *
     * @mbggenerated Sun Sep 13 15:37:00 CST 2015
     */
    int updateByPrimaryKey(RdLoanAgreement record);
    
    //@Select (value = "SELECT l.loanNumber as loanNumber, l.createDateTime as startDate, l.deptMethod as investType, l.debitAmount as applyMoney, round((l.totalMoneyDays - l.restMoneyDays) / l.debitDuration) as realityMoney, round(l.restMoneyDays / l.debitDuration) as surplusMoney, round(p.interest*10) as predictEarnings, l.no as borrowingNumber, l.debiterName as name, l.debiterIdentity as idCard, l.debiterQualifierType as identity, round((l.totalMoneyDays - l.restMoneyDays) / l.debitDuration) as lendMoney, l.debitPurpose as purpose, l.paybackStartDate as startRepayment, o.amount as actualAmount FROM rd_loan_agreement l, rd_product p, rd_order o WHERE p.assignId = l.ids and p.ids = o.productIds and l.ids = o.assignmentId and o.ids = #{orderId} and o.appUserId = #{userId} and  p.ids = #{productId}")
    @Select (value = "SELECT l.loanNumber as loanNumber, l.createDateTime as startDate, l.deptMethod as investType, l.debitAmount as applyMoney, round(p.interest*10) as predictEarnings, l.no as borrowingNumber, l.debiterName as name, l.debiterIdentity as idCard, l.debiterQualifierType as identity, l.debitPurpose as purpose, l.paybackStartDate as startRepayment, o.amount as actualAmount, l.briefContent as briefContent FROM rd_loan_agreement l, rd_product p, rd_order o WHERE o.ids = #{orderId} and o.appUserId = #{userId} and p.ids = #{productId} and p.assignId = l.ids and p.ids = o.productIds and l.ids = o.assignmentId")
    BorrowOrderEntity getBorrowOrder(@Param("orderId")String orderId, @Param("productId")String productId, @Param("userId")String userId);
}